% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gatbxr.R
\docType{package}
\name{gatbxr-package}
\alias{gatbxr}
\alias{gatbxr-package}
\title{Gentic Algorithm Toolbox Implemented by R}
\description{
R version of genetic toolbox for implementing a wide range of genetic algorithm methods.
}
\details{
To create populations:
\itemize{
 \item{\code{\link{crtbase}}} Create a base vector
 \item{\code{\link{crtbp}}} Create arbitrary discrete random populations
 \item{\code{\link{crtrp}}} Create real-valued initial population
}

Fitness assignment:
\itemize{
 \item{\code{\link{ranking}}} Generalised rank-based fitness assignment
 \item{\code{\link{scaling}}} Proportional fitness scailing
}

Selection functions:
\itemize{
 \item{\code{\link{reins}}} Uniform random and fitness-based reinsertion
 \item{\code{\link{rws}}} Roulette wheel selection
 \item{\code{\link{select}}} High-level selection routine
 \item{\code{\link{sus}}} Stochastic universal sampling
}

Mutation operators:
\itemize{
 \item{\code{\link{mut}}} Discrete mutation
 \item{\code{\link{mutate}}} High-level mutation function
 \item{\code{\link{mutbga}}} Real-value mutation
}

Crossover operators:
\itemize{
 \item{\code{\link{recdis}}} Discrete recombination
 \item{\code{\link{recint}}} Intermediate recombination
 \item{\code{\link{reclin}}} Line recombination
 \item{\code{\link{recmut}}} Line recombination with mutation features
 \item{\code{\link{recombin}}} High-level recombination operator
 \item{\code{\link{xovdp}}} Double-point crossover
 \item{\code{\link{xovdprs}}} Double-point reduced surrogate crossover
 \item{\code{\link{xovmp}}} General multi-point crossover
 \item{\code{\link{xovsh}}} Shuffle crossover
 \item{\code{\link{xovshrs}}} Shuffle reduced surrogate crossover
 \item{\code{\link{xovsp}}} Single-point crossover
 \item{\code{\link{xovsprs}}} Single-point reduced surrogate crossover
}

Subpopulation support:
\itemize{
 \item{\code{\link{migrate}}} exchange individuals between subpopulations
}

Utility functions:
\itemize{
 \item{\code{\link{bs2rv}}} binary string to real-value conversion
}
}
\examples{
##
## SGA.M          (Simple Genetic Algorithm)
##
## This script implements the Simple Genetic Algorithm.
## Test objective function is De Jong's first test funciton.
## Binary representation for the individuals is used.
##
## Author:     Hartmut Pohlheim
## History:    23.03.94     file created
##             15.01.03     tested under MATLAB v6 by Alex Shenfield
##             06.06.16     Re-modified for R by David Zhao

require("gatbxr")

NIND = 40;           ## Number of individuals per subpopulations
MAXGEN = 300;        ## max Number of generations
GGAP = 0.9;          ## Generation gap, how many new individuals are created
SEL_F = 'sus';       ## Name of selection function
XOV_F = 'xovsp';     ## Name of recombination function for individuals
MUT_F = 'mut';       ## Name of mutation function for individuals
OBJ_F = 'objfun1';   ## Name of function for objective values

objfun1 <- function(Chrom){
  res <- apply(Chrom * Chrom,1,sum)
  return(res)
}

## set boundaries of objective function
   lb=-512;
   ub=512;

## Number of variables of objective function, in OBJ_F defined
   NVAR = 20;   

## Build fielddescription matrix
   PRECI = 20;    ## Precisicion of binary representation
   FieldDD = list(prec=PRECI,lb=lb,ub=ub,code="gray",scale="arith",lbin=TRUE,ubin=TRUE);

## Create population
   Chrom = crtbp(NIND, NVAR*PRECI)$Chrom;
   ObjV = objfun1(bs2rv(Chrom,FieldDD));

## reset count variables
   gen = 0;
   Best = rep(NA,MAXGEN)

## Iterate population
   while (gen < MAXGEN){
     ## Calculate objective function for population
     Best[gen+1] = min(ObjV);
     
     ## Fitness assignement to whole population
     FitnV = ranking(ObjV);
     
     ## Select individuals from population
     SelCh = select(SEL_F, Chrom, FitnV, GGAP);
     
     ## Recombine selected individuals (crossover)
     SelCh=recombin(XOV_F, SelCh);
     
     ## Mutate offspring
     SelCh=mutate(MUT_F, SelCh);
     
     ##Evaluate offspring, call objective function
     ObjVSel = objfun1(bs2rv(SelCh,FieldDD));
     
     ## Insert offspring in population replacing parents
     rs = reins(Chrom, SelCh,1,c(1,1),ObjV,ObjVSel);
     Chrom = rs$Chrom;
     ObjV  = rs$ObjVCh

     gen = gen + 1;
   }
## End of script
}
\author{
David Zhao \email{wethenwethen@gmail.com}
}

